<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>自签证书 on 萝莉乐园</title>
        <link>https://jtntr.github.io/luolileyuan-blog/tags/%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/</link>
        <description>Recent content in 自签证书 on 萝莉乐园</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 23 Jun 2022 22:14:03 +0800</lastBuildDate><atom:link href="https://jtntr.github.io/luolileyuan-blog/tags/%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>OpenSSL教程</title>
        <link>https://jtntr.github.io/luolileyuan-blog/p/openssl%E6%95%99%E7%A8%8B/</link>
        <pubDate>Thu, 23 Jun 2022 22:14:03 +0800</pubDate>
        
        <guid>https://jtntr.github.io/luolileyuan-blog/p/openssl%E6%95%99%E7%A8%8B/</guid>
        <description>&lt;img src="https://jtntr.github.io/luolileyuan-blog/p/openssl%E6%95%99%E7%A8%8B/ced7813d880f11ebb6edd017c2d2eca2.jpg" alt="Featured image of post OpenSSL教程" /&gt;&lt;h1 id=&#34;相关概念&#34;&gt;相关概念&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;SSL&lt;/strong&gt;即安全套接字协议，是为网络通信提供安全及数据完整性的一种安全协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字证书&lt;/strong&gt;是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名。&lt;/p&gt;
&lt;p&gt;一般证书分有三类，&lt;strong&gt;根证书&lt;/strong&gt;、&lt;strong&gt;服务器证书&lt;/strong&gt;和&lt;strong&gt;客户端证书&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;根证书是生成服务器证书和客户端证书的基础，是信任的源头，也可以叫自签发证书，即CA证书。&lt;/p&gt;
&lt;p&gt;服务器证书由根证书签发，配置在服务器上的证书。&lt;/p&gt;
&lt;p&gt;客户端证书由根证书签发配置在服务器上，并发送给客户，让客户安装在浏览器里的证书。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公钥&lt;/strong&gt;是公开的，用来传输对方的随机密钥，只有通过私钥才能解密，这时就只有双方知道密钥了，从而达到安全传输的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私钥&lt;/strong&gt;是自己保留，只有通过私钥才能解密公钥加密的数据，对于私钥的使用可以设置密码。&lt;/p&gt;
&lt;p&gt;最常见的单向认证为例，简述一下通信过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端向服务器发送请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器将包含公钥的证书通过明文发送给客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端通过根证书验证服务器证书是否有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有效，客户端生成一个随机密钥，也叫对称加密密钥，使用服务器的公钥进行加密传输。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器通过私钥解密客户端传输的对称加密密钥。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这时只有服务器和客户端知道这个对称加密密钥，双方可以进行对称加密传输。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://jtntr.github.io/luolileyuan-blog/luolileyuan-blog/H:%5c%e7%bb%85%e5%a3%ab%5cGOLang%5chugo%5cj-blog%5ccontent%5cpost%5copenSSL%5c%e9%80%9a%e4%bf%a1%e8%bf%87%e7%a8%8b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;openssl使用教程&#34;&gt;OpenSSL使用教程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenSSL是一个安全套接字层密码库，其包括常用的密码算法、常用的密钥生成和证书封装管理功能及SSL协议，并提供了一个丰富的应用程序以供测试。&lt;/p&gt;
&lt;p&gt;/usr/lib/ssl/openssl.cnf是配置文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OpenSSl是一个开源项目，其由三个部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;openssl命令行工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libencrypt加密算法库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libssl加密模块应用库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;openssl命令工具有两种运行模式：&lt;strong&gt;交换模式&lt;/strong&gt;和&lt;strong&gt;批处理模式&lt;/strong&gt;。直接输入openssl回车即可进入交互模式，而输入带命令选项的openssl命令则进行批处理模式。&lt;/p&gt;
&lt;h2 id=&#34;命令&#34;&gt;命令&lt;/h2&gt;
&lt;p&gt;    查看当前OpenSSL版本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl version -a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    对称加密&lt;strong&gt;enc&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl enc -ciphername [-in filename] [-out filename] [-pass arg] [-e] [-d] [-a/-base64] [-A] [-k password] [-kfile filename] [-K key] [-iv IV] [-S salt] [-salt] [-nosalt] [-z] [-md] [-p] [-P] [-bufsize number] [-nopad] [-debug] [-none] [-engine id]&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-e:：加密；&lt;/p&gt;
&lt;p&gt;-d：解密；&lt;/p&gt;
&lt;p&gt;-ciphername：ciphername为相应的对称加密算命名字，如-des3、-ase128、-cast、-blowfish等等&lt;/p&gt;
&lt;p&gt;-a/-base64：使用base-64位编码格式&lt;/p&gt;
&lt;p&gt;-salt：自动插入一个随机数作为文件内容加密，默认选项；&lt;/p&gt;
&lt;p&gt;-in FILENAME：指定要加密的文件的存放路径；&lt;/p&gt;
&lt;p&gt;-out FILENAME：指定加密后的文件的存放路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    单向加密&lt;strong&gt;dgst&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl dgst [-md5|-md4|-md2|-sha1|-sha|-mdc2|-ripemd160|-dss1] [-c] [-d] [-hex] [-binary] [-out filename] [-sign filename] [-keyform arg] [-passin arg] [-verify filename] [-prverify filename] [-signature filename] [-hmac key] [file&amp;hellip;]&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;[-md5|-md4|-md2|-sha1|-sha|-mdc2|-ripemd160|-dss1]：指定一种单向加密算法；&lt;/p&gt;
&lt;p&gt;-out FILENAME：将加密的内容保存到指定的文件中；&lt;/p&gt;
&lt;p&gt;单向加密除了openssl dgst工具还有：md5sum，sha1sum，sha224sum，sha256sum ，sha384sum，sha512sum。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    加密密码&lt;strong&gt;password&lt;/strong&gt;，生成密码的hash离散值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl passwd [-crypt] [-1] [-apr1] [-salt string] [-in file] [-stdin] [-noverify] [-quiet] [-table] {password}&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-salt STRING：添加随机数；&lt;/p&gt;
&lt;p&gt;-in FILE：对输入的文件内容进行加密；&lt;/p&gt;
&lt;p&gt;-stdin：对标准输入的内容进行加密；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    生成随机数&lt;strong&gt;rand&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl rand [-out file] [-rand file(s)] [-base64] [-hex] num&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-base64：以base64编码格式输出。&lt;/p&gt;
&lt;p&gt;-hex：使用十六进制编码格式。&lt;/p&gt;
&lt;p&gt;-out FILE：将生成的内容保存在指定的文件中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    生成密钥对，&lt;strong&gt;genrsa&lt;/strong&gt;生成私钥，然后再使用&lt;strong&gt;rsa&lt;/strong&gt;从私钥中提取公钥。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl genrsa [-out filename] [-passout arg] [-des] [-des3] [-idea] [-f4] [-3] [-rand file(s)] [-engine id] [numbits]&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-out FILENAME：将生成的私钥保存至指定的文件中；&lt;/p&gt;
&lt;p&gt;[-des] [-des3] [-idea]：指定加密算法。&lt;/p&gt;
&lt;p&gt;numbits：指明生成的私钥大小，默认是512。&lt;/p&gt;
&lt;p&gt;openssl rsa [-inform PEM|NET|DER] [-outform PEM|NET|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-sgckey] [-des] [-des3] [-idea] [-text] [-noout] [-modulus] [-check] [-pubin] [-pubout] [-engine id]&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-in FILENAME：指明私钥文件的存放路径。&lt;/p&gt;
&lt;p&gt;-out FILENAME：指明将公钥的保存路径。&lt;/p&gt;
&lt;p&gt;-pubout：根据提供的私钥，从中提取公钥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    创建CA和申请证书，&lt;strong&gt;req&lt;/strong&gt;用于生成自签证书&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl    req [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-text] [-pubkey] [-noout] [-verify] [-modulus] [-new] [-rand file(s)] [-newkey rsa:bits] [-newkey dsa:file] [-nodes] [-key filename] [-keyform PEM|DER] [-keyout filename] [-[md5|sha1|md2|mdc2]] [-config filename] [-subj arg] [-multivalue-rdn] [-x509] [-days n] [-set_serial n] [-asn1-kludge] [-newhdr] [-extensions section] [-reqexts section] [-utf8] [-nameopt] [-batch] [-verbose] [-engine id]&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-x509：专用于生成CA自签证书&lt;/p&gt;
&lt;p&gt;-days：指定证书的有效期限，单位为day，默认是365天&lt;/p&gt;
&lt;p&gt;-inform arg ：指定输入文件格式，可以为DER或PEM，默认为PEM。&lt;/p&gt;
&lt;p&gt;-outform  arg：指定输出文件格式，可以为DER或PEM，默认为PEM。&lt;/p&gt;
&lt;p&gt;-in  arg：  指定输入文件。&lt;/p&gt;
&lt;p&gt;-out arg：指定输出文件。&lt;/p&gt;
&lt;p&gt;-new ：创建新的证书请求文件。&lt;/p&gt;
&lt;p&gt;-key  file： 指定生成证书用到的私钥文件。&lt;/p&gt;
&lt;p&gt;-keyform arg： 指定创建证书请求的私钥文件的格式，可以为DER或PEM，默认为PEM。&lt;/p&gt;
&lt;p&gt;-passion  arg：指定私钥文件的口令保护来源。&lt;/p&gt;
&lt;p&gt;-verify： 校验证书请求文件的主体签名是否有效。&lt;/p&gt;
&lt;p&gt;-noout：不打印证书请求信息。&lt;/p&gt;
&lt;p&gt;-text：文件打印证书请求文件。&lt;/p&gt;
&lt;p&gt;-modulus：输出证书请求的模数&lt;/p&gt;
&lt;p&gt;-keyout：指定生成的私钥文件名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    &lt;strong&gt;ca&lt;/strong&gt;命令用于在CA服务器上签署或吊销证书&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl ca [-verbose] [-config filename] [-name section] [-gencrl]&lt;/p&gt;
&lt;p&gt;[-revoke file] [-crl_reason reason] [-crl_hold instruction] [-crl_compromise time]&lt;/p&gt;
&lt;p&gt;[-crl_CA_compromise time] [-subj arg] [-crldays days][-crlhours hours]&lt;/p&gt;
&lt;p&gt;[-crlexts section] [-startdate date] [-enddate date]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    &lt;strong&gt;x509&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-noout：不输出加密的证书内容。&lt;/p&gt;
&lt;p&gt;-serial：输出证书序列号。&lt;/p&gt;
&lt;p&gt;-dates：显示证书有效期的开始和终止时间。&lt;/p&gt;
&lt;p&gt;-subject：输出证书的subject&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    &lt;strong&gt;crl&lt;/strong&gt;工具，用于处理PME或DER格式的CRL文件&lt;/p&gt;
&lt;h1 id=&#34;使用案例&#34;&gt;使用案例&lt;/h1&gt;
&lt;h2 id=&#34;一生成证书签名请求csr&#34;&gt;一、生成证书签名请求(CSR)&lt;/h2&gt;
&lt;h4 id=&#34;11-生成私钥和csr&#34;&gt;1.1 生成私钥和CSR&lt;/h4&gt;
&lt;p&gt;小面命令创建一个2048位的私钥（domain.key）以及一个CSR（domain.csr）:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl req &lt;br&gt;
-newkey rsa:2048 -nodes -keyout domain.key &lt;br&gt;
-out domain.csr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;12-使用已有私钥生成csr&#34;&gt;1.2 使用已有私钥生成CSR&lt;/h4&gt;
&lt;p&gt;如果你已经有了一个私钥，那么可以直接用它来向CA申请证书。下面命令使用一个已有的私钥（domain.key）创建一个新的CSR（domain.csr）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl req &lt;br&gt;
-key domain.key &lt;br&gt;
-new -out domain.csr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;13-使用已有的证书和私钥生成csr&#34;&gt;1.3 使用已有的证书和私钥生成CSR&lt;/h4&gt;
&lt;p&gt;如果你需要续订已有的证书，但你和CA都没有原始的CSR，那可以再次生成CSR。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl x509 &lt;br&gt;
-in domain.crt &lt;br&gt;
-signkey domain.key &lt;br&gt;
-x509toreq -out domain.csr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二生成ssl证书&#34;&gt;二、生成SSL证书&lt;/h2&gt;
&lt;p&gt;如果你只是想用SSL证书加固你的web服务器，但是并不需要CA签名的证书，那么简单的方法是自签证书。&lt;/p&gt;
&lt;h4 id=&#34;21-生成自签名证书&#34;&gt;2.1 生成自签名证书&lt;/h4&gt;
&lt;p&gt;下面的命令创建一个2048的私钥（domain.key）以及一个自签名证书（domain.crt）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl req &lt;br&gt;
-newkey rsa:2048 -nodes -keyout domain.key &lt;br&gt;
-x509 -days 365 -out domain.crt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;22-使用已有私钥生成自签名证书&#34;&gt;2.2 使用已有私钥生成自签名证书&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl req &lt;br&gt;
-key domain.key &lt;br&gt;
-new &lt;br&gt;
-x509 -days 365 -out domain.crt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;23-使用已有的私钥和csr生成自签名证书&#34;&gt;2.3 使用已有的私钥和CSR生成自签名证书&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl x509 &lt;br&gt;
-signkey domain.key &lt;br&gt;
-in domain.csr &lt;br&gt;
-req -days 365 -out domain.crt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;三查看证书&#34;&gt;三、查看证书&lt;/h2&gt;
&lt;h4 id=&#34;31-查看csr条目&#34;&gt;3.1 查看CSR条目&lt;/h4&gt;
&lt;p&gt;下面的命令可以查看CSR文件的明文文本并进行验证&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl req -text -noout -verify -in domain.csr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;32-查看证书条目&#34;&gt;3.2 查看证书条目&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl x509 -text -noout -in domain.crt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;33-验证证书是否由ca签发&#34;&gt;3.3 验证证书是否由CA签发&lt;/h4&gt;
&lt;p&gt;下面命令用来验证证书（domain.crt）是否由证书颁发机构（ca.crt）签发&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl verify -verbose -CAFile ca.crt domain.crt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;四私钥生成与验证&#34;&gt;四、私钥生成与验证&lt;/h2&gt;
&lt;h4 id=&#34;41-创建私钥&#34;&gt;4.1 创建私钥&lt;/h4&gt;
&lt;p&gt;下面创建一个密码保护的2048位私钥domain.key&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl genrsa -des3 -out domain.key 2048&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;42-验证私钥&#34;&gt;4.2 验证私钥&lt;/h4&gt;
&lt;p&gt;下面命令可以验证私钥domain.key是否有效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl rsa -check -in domain.key&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;43-验证私钥与证书和csr匹配&#34;&gt;4.3 验证私钥与证书和CSR匹配&lt;/h4&gt;
&lt;p&gt;下面命令验证私钥domain.key是否与证书domain。crt以及CSR匹配：如果下面三个命令的输出一致，那么有极高的概率可以人为私钥、证书和CSR是相关的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl rsa -noout -modulus -in domain.key | openssl md5
openssl x509 -noout -modulus -in domain.crt | openssl md5
openssl req -noout -modulus -in domain.csr | openssl md5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;44-加密私钥&#34;&gt;4.4 加密私钥&lt;/h4&gt;
&lt;p&gt;下面命令将私钥unencrypted.key加密，输出加密后的私钥encrypted.key&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl rsa -des3 &lt;br&gt;
-in unencrypted.key &lt;br&gt;
-out encrypted.key&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.5 解密私钥&lt;/p&gt;
&lt;p&gt;下面命令将加密私钥encrypted.key解密，并输出明文结果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl rsa &lt;br&gt;
-in encrypted.key &lt;br&gt;
-out decrypted.key&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;五证书格式转换&#34;&gt;五、证书格式转换&lt;/h2&gt;
&lt;h4 id=&#34;51-pem转der&#34;&gt;5.1 PEM转DER&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl x509 &lt;br&gt;
-in domain.crt &lt;br&gt;
-outform der -out domain.der&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;52-der转pem&#34;&gt;5.2 DER转PEM&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl x509 &lt;br&gt;
-inform der -in domain.der &lt;br&gt;
-out domain.crt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;53-pem转pkcs7&#34;&gt;5.3 PEM转PKCS7&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl crl2pkcs7 -nocrl &lt;br&gt;
-certfile domain.crt &lt;br&gt;
-certfile ca-chain.crt &lt;br&gt;
-out domain.p7b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;54-pkcs7转换为pem&#34;&gt;5.4 PKCS7转换为PEM&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl pkcs7 &lt;br&gt;
-in domain.p7b &lt;br&gt;
-print_certs -out domain.crt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;55-pem转换为pkcs12&#34;&gt;5.5 PEM转换为PKCS12&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl pkcs12 &lt;br&gt;
-inkey domain.key &lt;br&gt;
-in domain.crt &lt;br&gt;
-export -out domain.pfx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;56-pkcs12转换为pem&#34;&gt;5.6 PKCS12转换为PEM&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;openssl pkcs12 &lt;br&gt;
-in domain.pfx &lt;br&gt;
-nodes -out domain.combined.crt&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
